openapi: 3.0.0
info:
  title: Foodie API
  version: 1.0.0
  description: API documentation for Foodie-API. Authentication is required for protected routes.
servers:
  - url: http://localhost:3000

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token obtained from /users/login endpoint
  schemas:
    Restaurant:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        address:
          type: string
        rating:
          type: number
          format: float
        cuisine:
          type: string
        hours:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

paths:
  /users:
    post:
      operationId: createUser
      summary: Register a new user
      description: Registers a new user with name, email, password, and phone. Returns the user ID on success.
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - email
                - password
                - phone
              properties:
                name:
                  type: string
                  example: John Doe
                email:
                  type: string
                  format: email
                  example: john@example.com
                password:
                  type: string
                  format: password
                  example: secret123
                phone:
                  type: string
                  example: '+1234567890'
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  userId:
                    type: string
                  message:
                    type: string
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string

  /users/{userId}:
    get:
      operationId: getUserById
      summary: Get user profile
      description: Retrieve user profile information. Users can only access their own profile.
      tags:
        - Users
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
          description: User ID
      responses:
        '200':
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                  name:
                    type: string
                  email:
                    type: string
                  phone:
                    type: string
                  createdAt:
                    type: string
                    format: date-time
                  updatedAt:
                    type: string
                    format: date-time
        '401':
          description: Access token required
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Access token required
        '403':
          description: Invalid token or access denied
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Invalid or expired token
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string

    patch:
      operationId: updateUser
      summary: Update user profile
      description: Update user profile fields (name, email, password, phone). Users can only update their own profile. Only provided fields are updated. Password is hashed if updated.
      tags:
        - Users
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
          description: User ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Jane Doe
                email:
                  type: string
                  format: email
                  example: jane@example.com
                password:
                  type: string
                  format: password
                  example: newpassword123
                phone:
                  type: string
                  example: '+1234567899'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                  name:
                    type: string
                  email:
                    type: string
                  phone:
                    type: string
                  createdAt:
                    type: string
                    format: date-time
                  updatedAt:
                    type: string
                    format: date-time
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        '401':
          description: Access token required
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Access token required
        '403':
          description: Invalid token or access denied
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Invalid or expired token
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string

  /users/login:
    post:
      operationId: loginUser
      summary: User login
      description: Authenticate user and generate JWT token. Returns JWT token and user ID on success. Use this token in the Authorization header for protected routes.
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: john@example.com
                password:
                  type: string
                  format: password
                  example: secret123
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: JWT token to use in Authorization header
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
                  userId:
                    type: string
                    description: User ID
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        '401':
          description: Invalid email or password
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Invalid email or password
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string

  /restaurants:
    get:
      operationId: getRestaurants
      summary: Get a list of restaurants
      description: Retrieve a paginated list of restaurants. Supports filtering by location and cuisine. Authentication required.
      tags:
        - Restaurants
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: location
          schema:
            type: string
          description: Filter by location (partial match)
        - in: query
          name: cuisine
          schema:
            type: string
          description: Filter by cuisine (exact match)
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Page number for pagination
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
          description: Number of results per page
      responses:
        '200':
          description: List of restaurants
          content:
            application/json:
              schema:
                type: object
                properties:
                  total:
                    type: integer
                  restaurants:
                    type: array
                    items:
                      $ref: '#/components/schemas/Restaurant'
        '401':
          description: Access token required
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Access token required
        '403':
          description: Invalid or expired token
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Invalid or expired token
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string

    post:
      operationId: createRestaurant
      summary: Create a new restaurant
      description: Create a new restaurant with the provided details. Authentication required.
      tags:
        - Restaurants
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - address
                - rating
                - cuisine
                - hours
              properties:
                name:
                  type: string
                  minLength: 2
                  maxLength: 100
                  example: 'Pizza Palace'
                address:
                  type: string
                  minLength: 5
                  maxLength: 200
                  example: '123 Main Street, City, State 12345'
                rating:
                  type: number
                  minimum: 0
                  maximum: 5
                  example: 4.5
                cuisine:
                  type: string
                  minLength: 2
                  maxLength: 50
                  example: 'Italian'
                hours:
                  type: string
                  minLength: 5
                  maxLength: 100
                  example: 'Mon-Fri: 9AM-10PM, Sat-Sun: 10AM-11PM'
      responses:
        '201':
          description: Restaurant created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Restaurant'
        '400':
          description: Invalid input data
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: 'name is required'
        '401':
          description: Access token required
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Access token required
        '403':
          description: Invalid or expired token
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Invalid or expired token
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string

  /restaurants/{restaurantId}:
    get:
      operationId: getRestaurantById
      summary: Get a restaurant by ID
      description: Retrieve a single restaurant by its ID. Authentication required.
      tags:
        - Restaurants
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: restaurantId
          required: true
          schema:
            type: string
          description: Restaurant ID
      responses:
        '200':
          description: Restaurant found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Restaurant'
        '401':
          description: Access token required
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Access token required
        '403':
          description: Invalid or expired token
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Invalid or expired token
        '404':
          description: Restaurant not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
